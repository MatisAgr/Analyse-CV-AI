import requests
import json
import time

BASE_URL = "http://127.0.0.1:8000"

def test_ai_status():
    """Test le statut de l'IA"""
    print("Test du statut IA...")
    try:
        response = requests.get(f"{BASE_URL}/api/ai-status/")
        data = response.json()
        
        if data.get('success'):
            print("IA op√©rationnelle!")
            print(f"   Mod√®les charg√©s: {data.get('ai_models_loaded')}")
            print(f"   Pipeline NER: {data.get('ner_pipeline_loaded')}")
        else:
            print(f"Erreur IA: {data.get('error')}")
        
        return data.get('success', False)
    except Exception as e:
        print(f"Erreur de connexion: {e}")
        return False

def create_test_cv_file():
    """Cr√©e un fichier CV de test"""
    cv_content = """
MARIE DUBOIS
D√©veloppeuse Full Stack Senior

üìß marie.dubois@email.com
üì± +33 6 12 34 56 78
üåê LinkedIn: linkedin.com/in/mariedubois

R√âSUM√â PROFESSIONNEL
D√©veloppeuse passionn√©e avec 6 ans d'exp√©rience dans le d√©veloppement d'applications web modernes.
Expertise en Python/Django et React. Forte capacit√© d'adaptation et excellent esprit d'√©quipe.

EXP√âRIENCE PROFESSIONNELLE

D√©veloppeuse Senior | TechInnovate (2021-2024)
‚Ä¢ Lead technique sur 3 projets web avec Django et React
‚Ä¢ Encadrement d'une √©quipe de 4 d√©veloppeurs juniors
‚Ä¢ Mise en place d'architectures microservices avec Docker
‚Ä¢ Am√©lioration des performances des applications de 40%

D√©veloppeuse Full Stack | WebSolutions (2019-2021)
‚Ä¢ D√©veloppement d'applications SaaS avec Django REST Framework
‚Ä¢ Frontend React avec TypeScript et Redux
‚Ä¢ Int√©gration de syst√®mes de paiement (Stripe, PayPal)
‚Ä¢ Mise en place de tests automatis√©s (Jest, Pytest)

D√©veloppeuse Junior | StartupXYZ (2018-2019)
‚Ä¢ Premi√®re exp√©rience en d√©veloppement web
‚Ä¢ Apprentissage des bonnes pratiques de d√©veloppement
‚Ä¢ Participation √† tous les aspects du cycle de d√©veloppement

FORMATION
Master en Informatique | √âcole Centrale Paris (2018)
Licence en Math√©matiques | Universit√© Paris-Saclay (2016)

COMP√âTENCES TECHNIQUES

Langages de programmation:
‚Ä¢ Python (expert) - 6 ans
‚Ä¢ JavaScript/TypeScript (avanc√©) - 5 ans
‚Ä¢ Java (interm√©diaire) - 2 ans
‚Ä¢ SQL (avanc√©) - 5 ans

Frameworks & Technologies:
‚Ä¢ Django, Django REST Framework
‚Ä¢ React, Vue.js, Angular
‚Ä¢ Node.js, Express
‚Ä¢ PostgreSQL, MongoDB, Redis
‚Ä¢ Docker, Kubernetes
‚Ä¢ AWS, Azure
‚Ä¢ Git, Jenkins, CI/CD

M√©thodologies:
‚Ä¢ Agile, Scrum
‚Ä¢ Test-Driven Development
‚Ä¢ DevOps practices
‚Ä¢ Code review

COMP√âTENCES TRANSVERSALES
‚Ä¢ Leadership technique
‚Ä¢ Mentorat et formation
‚Ä¢ Gestion de projet
‚Ä¢ Communication technique
‚Ä¢ R√©solution de probl√®mes complexes

LANGUES
‚Ä¢ Fran√ßais (natif)
‚Ä¢ Anglais (courant) - TOEIC 950
‚Ä¢ Espagnol (notions)

CERTIFICATIONS
‚Ä¢ AWS Certified Developer Associate (2023)
‚Ä¢ Certified Scrum Master (2022)
‚Ä¢ Python Institute PCAP (2021)

PROJETS PERSONNELS
‚Ä¢ Contributrice open source sur Django (50+ commits)
‚Ä¢ Blog technique avec 10k+ lecteurs mensuels
‚Ä¢ Application mobile de gestion de budget (React Native)

CENTRES D'INT√âR√äT
‚Ä¢ Veille technologique
‚Ä¢ Randonn√©e et photographie
‚Ä¢ B√©n√©volat dans l'enseignement du code
"""
    
    filename = "cv_test_marie_dubois.txt"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(cv_content)
    
    return filename

def test_cv_upload_and_analysis():
    print("\nTest d'upload et d'analyse de CV...")
    
    try:
        cv_file = create_test_cv_file()
        
        with open(cv_file, 'rb') as f:
            files = {'cv_file': f}
            data = {
                'name': 'Marie Dubois',
                'email': 'marie.dubois@test.com'
            }
            
            response = requests.post(f"{BASE_URL}/api/upload-cv/", files=files, data=data)
        
        import os
        os.remove(cv_file)
        
        if response.status_code == 200:
            result = response.json()
            print("CV analys√© avec succ√®s!")
            print(f"   ID du CV: {result.get('resume_id')}")
            
            analysis = result.get('analysis', {})
            skills = analysis.get('skills', {})
            
            print("\nComp√©tences d√©tect√©es:")
            for category, skill_list in skills.items():
                if skill_list:
                    print(f"   {category.upper()}: {', '.join(skill_list[:5])}...")
            
            experience = analysis.get('experience', {})
            print(f"\nExp√©rience: {experience.get('years_of_experience', 'Non d√©tect√©')} ans")
            
            languages = analysis.get('languages', [])
            if languages:
                print(f"Langues: {', '.join(languages)}")
            
            return result.get('resume_id')
        else:
            print(f"Erreur upload: {response.text}")
            return None
            
    except Exception as e:
        print(f"Erreur: {e}")
        return None

def test_job_matching(resume_id):
    print("\nTest de correspondance avec un poste...")
    
    job_description = """
POSTE: D√©veloppeur Python Senior

DESCRIPTION:
Nous recherchons un d√©veloppeur Python exp√©riment√© pour rejoindre notre √©quipe technique.
Vous travaillerez sur des projets innovants utilisant Django et des technologies modernes.

COMP√âTENCES REQUISES:
‚Ä¢ 4+ ann√©es d'exp√©rience en Python
‚Ä¢ Ma√Ætrise de Django et Django REST Framework
‚Ä¢ Exp√©rience avec React ou Vue.js
‚Ä¢ Connaissance des bases de donn√©es PostgreSQL
‚Ä¢ Exp√©rience avec Docker et Kubernetes
‚Ä¢ M√©thodologies Agile/Scrum
‚Ä¢ Bon niveau d'anglais

COMP√âTENCES APPR√âCI√âES:
‚Ä¢ Exp√©rience AWS ou Azure
‚Ä¢ Leadership technique
‚Ä¢ Contribution √† l'open source
‚Ä¢ Exp√©rience en mentorat

AVANTAGES:
‚Ä¢ T√©l√©travail hybride
‚Ä¢ Formation continue
‚Ä¢ √âquipe technique passionn√©e
‚Ä¢ Projets √† fort impact
"""
    
    try:
        data = {
            'resume_id': resume_id,
            'job_description': job_description
        }
        
        response = requests.post(
            f"{BASE_URL}/api/analyze-cv-job/",
            headers={'Content-Type': 'application/json'},
            data=json.dumps(data)
        )
        
        if response.status_code == 200:
            result = response.json()
            match_result = result.get('match_result', {})
            
            print("Correspondance calcul√©e!")
            print(f"   Score global: {match_result.get('overall_score', 0):.1f}%")
            print(f"   Similarit√© s√©mantique: {match_result.get('semantic_similarity', 0):.1f}%")
            print(f"   Correspondance comp√©tences: {match_result.get('skills_match_score', 0):.1f}%")
            
            return True
        else:
            print(f"Erreur correspondance: {response.text}")
            return False
            
    except Exception as e:
        print(f"Erreur: {e}")
        return False

def main():
    print("D√âMONSTRATION DE L'API DJANGO + IA")
    print("=" * 50)
    
    print("V√©rification de la connexion au serveur...")
    try:
        response = requests.get(f"{BASE_URL}/", timeout=5)
        if response.status_code == 200:
            print("Serveur Django accessible!")
        else:
            print(f"Serveur r√©pond avec code: {response.status_code}")
    except Exception as e:
        print(f"Serveur non accessible: {e}")
        print("   Assurez-vous que le serveur Django est lanc√© avec:")
        print("   python manage.py runserver")
        return
    
    if not test_ai_status():
        print("IA non disponible - la d√©monstration continue avec des fonctionnalit√©s limit√©es")
    
    resume_id = test_cv_upload_and_analysis()
    
    if not resume_id:
        print("Impossible de continuer sans CV analys√©")
        return
    
    test_job_matching(resume_id)
    
    print("\n" + "=" * 50)
    print("D√âMONSTRATION TERMIN√âE!")
    print("=" * 50)
    print("\nFonctionnalit√©s d√©montr√©es:")
    print("Serveur Django avec IA int√©gr√©e")
    print("Upload et analyse automatique de CV")
    print("Extraction de comp√©tences et exp√©rience")
    print("Calcul de correspondance CV/poste")
    print("API REST compl√®te")
    
    print(f"\nInterface web disponible sur: {BASE_URL}")
    print("\nEndpoints API test√©s:")
    print(f"‚Ä¢ GET  {BASE_URL}/api/ai-status/")
    print(f"‚Ä¢ POST {BASE_URL}/api/upload-cv/")
    print(f"‚Ä¢ POST {BASE_URL}/api/analyze-cv-job/")
    
    print("\nüîß Prochaines √©tapes:")
    print("‚Ä¢ Tester l'interface web dans le navigateur")
    print("‚Ä¢ Uploader vos propres CV pour analyse")
    print("‚Ä¢ Int√©grer l'API dans votre application")
    print("‚Ä¢ Personnaliser les comp√©tences et mod√®les IA")

if __name__ == "__main__":
    main()
