# Generated by Django 5.2.5 on 2025-08-29 11:19

import CVAnalyzer.models
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('model_type', models.CharField(choices=[('transformer', 'Transformer'), ('bert', 'BERT'), ('gpt', 'GPT'), ('sentence_transformer', 'Sentence Transformer')], max_length=50)),
                ('model_path', models.CharField(max_length=500)),
                ('version', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('required_skills', models.JSONField(default=list)),
                ('required_experience_years', models.IntegerField(default=0)),
                ('department', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='resumes/')),
                ('original_filename', models.CharField(max_length=255)),
                ('extracted_text', models.TextField(blank=True)),
                ('extracted_skills', models.JSONField(default=list)),
                ('extracted_experience', models.JSONField(default=list)),
                ('extracted_education', models.JSONField(default=list)),
                ('extracted_languages', models.JSONField(default=list)),
                ('file_size', models.IntegerField(default=0)),
                ('file_type', models.CharField(max_length=10)),
                ('processed', models.BooleanField(default=False)),
                ('processing_error', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resumes', to='CVAnalyzer.candidate')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Adresse email (identifiant de connexion)', max_length=254, unique=True)),
                ('username', models.CharField(help_text="Nom d'utilisateur généré automatiquement", max_length=150, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('recruteur', 'Recruteur'), ('candidat', 'Candidat')], default='candidat', help_text="Rôle de l'utilisateur dans le système", max_length=20)),
                ('phone', models.CharField(blank=True, help_text='Numéro de téléphone', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Candidature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('poste', models.CharField(help_text='Intitulé du poste', max_length=200)),
                ('entreprise', models.CharField(blank=True, help_text="Nom de l'entreprise", max_length=200)),
                ('cv', models.FileField(help_text='CV au format PDF, DOC ou DOCX', upload_to=CVAnalyzer.models.upload_cv_to, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx'])])),
                ('lettre_motivation', models.FileField(blank=True, help_text='Lettre de motivation (optionnelle)', null=True, upload_to=CVAnalyzer.models.upload_lettre_to, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx'])])),
                ('status', models.CharField(choices=[('en_attente', 'En attente'), ('en_cours', "En cours d'examen"), ('acceptee', 'Acceptée'), ('refusee', 'Refusée')], default='en_attente', help_text='Statut de la candidature', max_length=20)),
                ('score_ia', models.FloatField(blank=True, help_text="Score d'analyse IA (0-100)", null=True)),
                ('competences_extraites', models.JSONField(blank=True, default=list, help_text='Compétences extraites par IA')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('commentaires', models.TextField(blank=True, help_text='Commentaires du recruteur')),
                ('candidat', models.ForeignKey(help_text='Candidat qui postule', on_delete=django.db.models.deletion.CASCADE, related_name='candidatures', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Candidature',
                'verbose_name_plural': 'Candidatures',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CVAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_score', models.FloatField(default=0.0)),
                ('skills_match_score', models.FloatField(default=0.0)),
                ('experience_score', models.FloatField(default=0.0)),
                ('education_score', models.FloatField(default=0.0)),
                ('matched_skills', models.JSONField(default=list)),
                ('missing_skills', models.JSONField(default=list)),
                ('analysis_details', models.JSONField(default=dict)),
                ('recommendations', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('job_position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cv_analyses', to='CVAnalyzer.jobposition')),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='CVAnalyzer.resume')),
            ],
            options={
                'ordering': ['-overall_score'],
                'unique_together': {('resume', 'job_position')},
            },
        ),
    ]
